{
  "openapi": "3.0.3",
  "info": {
    "title": "Blog Documentation - OpenAPI 3.0",
    "description": "Dokumentasi API Blog",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "All Endpoit for Users"
    },
    {
      "name": "auth",
      "description": "Access to User"
    }
  ],
  "paths": {
    "/api/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users lists",
        "description": "Get Users Lists",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page",
            "required": false,
            "explode": true,
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Pagination limit",
            "required": false,
            "explode": true,
            "schema": {
              "type": "number",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new users to the bank system",
        "description": "Add a new users to the bank system",
        "operationId": "addUsers",
        "requestBody": {
          "description": "Create a new users in the bank system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a users in the bank system with form data",
        "description": "",
        "operationId": "updateUserWithForm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of user that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email of user that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of user that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "description": "",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/register": {
      "post" : {
        "tags": [
          "auth"
        ],
        "summary": "Register user",
        "description": "This for register user.",
        "operationId": "register",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login" :{
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "login",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Users": {
        "required": [
          "username",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "lila@mail.com"
          },
          "name": {
            "type": "string",
            "example": "Lilac"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      }
    },
    "requestBodies": {
      "Users": {
        "description": "Users object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {      
                "email": {
                  "type": "string",
                  "example": "afi@mail.com"
                },
                "name": {
                  "type": "string",
                  "example": "Afi Shaf"
                },
                "password": {
                  "type": "string",
                  "example": "password"
                }
              }
            }
          }
        }
      }
    }
  } 
}